#!/usr/bin/env ruby
require 'json'
require 'base64'
require 'faraday'
require 'shellwords'
require 'tmpdir'
require 'open3'
require 'socket'

Thread.abort_on_exception = true

class MultiIO
  def initialize(*ios)
    @ios = ios
  end

  def write(*args)
    @ios.each do |io|
      io.write(*args)
    end
  end

  def close(*args)
    @ios.each do |io|
      io.close(*args)
    end
  end
end

class APILogWriter
  def initialize(url, endpoint)
    @endpoint = endpoint
    @conn = Faraday.new(url: url) do |f|
      f.adapter Faraday.default_adapter
    end
  end

  def write(data)
    res = @conn.put(@endpoint) do |req|
      req.body = data
    end

    unless 200 <= res.status && res.status < 300
      raise "sending log failed"
    end
  end
end

def system_or_abort(*args)
  options = {}
  if args.last.is_a?(Hash)
    options = args.pop
  end

  puts "executing: #{args.map(&:shellescape).join(' ')}"
  Bundler.with_clean_env do
    unless system(*args, options)
      raise "command failed."
    end
  end
end

node_attribute_generator = "node-gen"
server_url = "http://192.168.55.1:3000"
consul_lock_prefix = "itamae"
itamae_bin = "itamae"
bootstrap_recipe_file = "bootstrap.rb"

conn = Faraday.new(url: server_url) do |faraday|
  faraday.request :url_encoded
  faraday.adapter Faraday.default_adapter
end

events = JSON.parse($stdin.read)
event  = events.last
unless event
  puts "no event"
  exit
end

raw_payload = event.fetch('Payload')
unless raw_payload
  puts "no payload"
  exit
end

payload = Base64.decode64(raw_payload)
plan = JSON.parse(conn.get("/plans/#{payload.to_i}.json").body)
revision = JSON.parse(conn.get("/revisions/#{plan.fetch('revision_id')}.json").body)
logs = JSON.parse(conn.get("/plans/#{plan.fetch('id')}/logs.json", host: Socket.gethostname).body)
if logs.empty?
  raise "no log"
end

log = logs.first

io = MultiIO.new($stdout, APILogWriter.new(server_url, "logs/#{log.fetch('id')}/append.json"))
working_dir = File.expand_path(File.dirname(__FILE__))

Dir.mktmpdir do |tmpdir|
  Dir.chdir(tmpdir) do
    puts tmpdir
    system_or_abort(File.expand_path(node_attribute_generator, working_dir), out: "node.json")

    # download
    system_or_abort("wget", "-O", "recipes.tar", URI.join(server_url, revision.fetch('file_path')).to_s)
    system_or_abort("tar", "xf", "recipes.tar")

    itamae_cmd = [itamae_bin, "local", '--node-json', 'node.json', '--log-level', 'debug']
    itamae_cmd << "--dry-run" if plan.fetch("is_dry_run")
    itamae_cmd << bootstrap_recipe_file

    consul_cmd = ["consul", "lock", "-n", "1", consul_lock_prefix, itamae_cmd.map(&:shellescape).join(' ')]

    Bundler.with_clean_env do
      Open3.popen3(*consul_cmd) do |stdin, stdout, stderr, wait_thr|
        stdin.close
        readers = [stdout, stderr]
        while readers.any?
          ready = IO.select(readers, [], readers)
          ready[0].each do |fd|
            if fd.eof?
              fd.close
              readers.delete(fd)
            else
              io.write(fd.readpartial(1024))
            end
          end
        end
      end
    end
  end
end

